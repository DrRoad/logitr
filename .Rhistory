install.packages('tidyverse')
install.packages('mlogit')
# Install logitr package from github
library('devtools')
install_github('jhelvy/logitr')
# Load logitr package
library('logitr')
# Load the reformatted 'Yogurt' data set from the mlogit package
data(yogurt)
head(yogurt )
data  <- yogurt
obsIDName  = 'obsID'
max(data[obsIDName])
maxObs <- max(data[obsIDName])
nbreaks=10
seq(maxObs, length.out = nbreaks)
seq(100, maxObs, length.out = nbreaks)
maxObs/nbreaks
start <- ceiling(maxObs/nbreaks)
start
seq(start, maxObs, length.out = nbreaks)
ceiling(seq(start, maxObs, length.out = nbreaks))
size <- ceiling(seq(ceiling(maxObs/nbreaks), maxObs, length.out = nbreaks))
size
nobs <- ceiling(seq(ceiling(maxObs/nbreaks), maxObs, length.out = nbreaks))
nobs
i=1
respIDs <- seq(nobs[i])
respIDs
which(data[obsIDName] %in% respIDs)
data[obsIDName]
data[obsIDName] %in% respIDs
respIDs <- seq(nobs[i])
respIDs
head(data[obsIDName] )
respIDs
data[obsIDName] %in% respIDs
data[obsIDName] == respIDs
which(data[obsIDName] == respIDs)
data[obsIDName] < nobs[i]
which(data[obsIDName] < nobs[i])
tempData <- data[which(data[obsIDName] < nobs[i]),]
dim(tempData )
dim(data )
head(tempData )
max(tempData$id)
max(tempData$obsID)
max(data[obsIDName])
tempData[obsIDName]
nAltsPerQ <- table(tempData[obsIDName])
nAltsPerQ
nAltsPerQ <- unique(table(tempData[obsIDName]))
nAltsPerQ
tempData$choice <- tempData[obsIDName]*0
head(tempData )
names(tempData)
head(tempData$choice )
class(tempData)
nAltsPerQ <- 4
seq(nAltsPerQ)
sample(seq(nAltsPerQ), nobs[i], replace = TRUE)
diag(nAltsPerQ)
table(tempData[obsIDName])
choices <- table(tempData[obsIDName])
head(seq(choices))
seq(choices[1])
seq(choices[1:2])
seq(choices[1:2])
choices[1:2]
apply(choices, seq)
obs <- table(tempData[obsIDName])
obs
nrows <- table(tempData[obsIDName])
nrows
1:4
1:c(1,2)
seq(c(1,2))
n <- nobs[i]
tempData <- data[which(data[obsIDName] < n),]
nrows <- table(tempData[obsIDName])
choices <- list()
i=
1
choice <- rep(0, nrows[i])
choice
seq(nrows[i])
sample(seq(nrows[i]), 1)
choice <- rep(0, nrows[i])
choice[sample(seq(nrows[i]), 1)] <- 1
choice
size <- nobs[i]
size
tempData <- data[which(data[obsIDName] < size),]
nrows <- table(tempData[obsIDName])
data <- tempData
dimdata
dim(data)
nrows <- table(data[obsIDName])
choices <- list()
nrows
i
choice <- rep(0, nrows[i])
choice[sample(seq(nrows[i]), 1)] <- 1
choice
nrows <- table(data[obsIDName])
choices <- list()
for (i in 1:n) {
choice <- rep(0, nrows[i])
choice[sample(seq(nrows[i]), 1)] <- 1
choices[[i]] <- choice
}
size
choice <- rep(0, nrows[i])
choice
nrows <- table(data[obsIDName])
choices <- list()
choice <- rep(0, nrows[i])
choice <- rep(0, nrows[i])
nrows[i]
nrows <- table(data[obsIDName])
nrows
choices <- list()
i
length(nrows )
nrows <- table(data[obsIDName])
choices <- list()
i
i=1
choice <- rep(0, nrows[i])
choice[sample(seq(nrows[i]), 1)] <- 1
choices[[i]] <- choice
nrows <- table(data[obsIDName])
choices <- list()
for (i in 1:length(nrows)) {
choice <- rep(0, nrows[i])
choice[sample(seq(nrows[i]), 1)] <- 1
choices[[i]] <- choice
}
unlist(choices)
generateChoices <- function(data, obsIDName, size) {
nrows <- table(data[obsIDName])
choices <- list()
for (i in 1:length(nrows)) {
choice <- rep(0, nrows[i])
choice[sample(seq(nrows[i]), 1)] <- 1
choices[[i]] <- choice
}
return(unlist(choices))
}
data       = yogurt
tempData <- data[which(data[obsIDName] < size),]
tempData$choice <- generateChoices(tempData, obsIDName, size)
head(tempData )
getTempData <- function(data, obsIDName, size) {
tempData <- data[which(data[obsIDName] < size),]
tempData$choice <- generateChoices(tempData, obsIDName, size)
return(tempData)
}
tempData <- getTempData(data, nobs[i])
tempData <- getTempData(data, obsIDName, nobs[i])
maxObs <- max(data[obsIDName])
nobs <- ceiling(seq(ceiling(maxObs/nbreaks), maxObs, length.out = nbreaks))
tempData <- getTempData(data, obsIDName, nobs[i])
dim(data )
head(data)
size
nobs
tempData <- data[which(data[obsIDName] < size),]
tempData
tempData$choice <- generateChoices(tempData, obsIDName, size)
getTempData <- function(data, obsIDName, size) {
tempData <- data[which(data[obsIDName] < size),]
tempData$choice <- generateChoices(tempData, obsIDName, size)
return(tempData)
}
tempData <- getTempData(data, obsIDName, nobs[i])
obsIDName
nobs[i]
i
i=1
tempData <- getTempData(data, obsIDName, nobs[i])
head(tempData )
dim(tempData)
# ============================================================================
# Functions for assessing sample size
# ============================================================================
#' Examine the standard errors from models before you collect choice data
#'
#' This function allows you to estimate a model on a design of experiment
#' that you have not yet used to collect data. This allows you to learn
#' about deficiencies in your design of experiment and also assess the sample
#' size needed to achieve parameter precision levels before you go out and
#' use the design to collect data. The function first determines the maximum
#' possible number of observations by taking the max of the "obsIDName"
#' argument. It then estimates a model
#' @keywords logitr, mnl, mxl, logit, sample size
#'
#' @export
#' @examples
#' # For an example go to: https://github.com/jhelvy/logitr/tree/master/example
sampleSizer = function(data, obsIDName, parNames, nbreaks=10, priceName=NULL,
randPars=NULL, randPrice=NULL, modelSpace='pref',
options=list()) {
maxObs <- max(data[obsIDName])
nobs <- ceiling(seq(ceiling(maxObs/nbreaks), maxObs, length.out = nbreaks))
models <- list()
for (i in 1:nbreaks) {
tempData <- getTempData(data, obsIDName, nobs[i])
model <- logitr(
data       = tempData,
choiceName = 'choice',
obsIDName  = obsIDName,
parNames   = parNames,
priceName  = priceName,
randPars   = randPars,
randPrice  = randPrice,
modelSpace = modelSpace,
options    = options)
models[[i]] <- getSE(model, i)
}
return(do.call(rbind, models))
}
getTempData <- function(data, obsIDName, size) {
tempData <- data[which(data[obsIDName] < size),]
tempData$choice <- generateChoices(tempData, obsIDName, size)
return(tempData)
}
generateChoices <- function(data, obsIDName, size) {
nrows <- table(data[obsIDName])
choices <- list()
for (i in 1:length(nrows)) {
choice <- rep(0, nrows[i])
choice[sample(seq(nrows[i]), 1)] <- 1
choices[[i]] <- choice
}
return(unlist(choices))
}
getSE <- function(model, size) {
se <- data.frame(
size = size,
se   = model$standErrs)
se$coef = row.names(se)
row.names(se) <- NULL
return(se)
}
# Install logitr package from github
library('devtools')
install_github('jhelvy/logitr')
# Load logitr package
library('logitr')
# Load the reformatted 'Yogurt' data set from the mlogit package
data(yogurt)
test <- sampleSizer(
data       = yogurt,
obsIDName  = 'obsID',
parNames   = c('price', 'feat', 'dannon', 'hiland', 'yoplait'),
nbreaks    = 5)
test
# ============================================================================
# Functions for assessing sample size
# ============================================================================
#' Examine the standard errors from models before you collect choice data
#'
#' This function allows you to estimate a model on a design of experiment
#' that you have not yet used to collect data. This allows you to learn
#' about deficiencies in your design of experiment and also assess the sample
#' size needed to achieve parameter precision levels before you go out and
#' use the design to collect data. The function first determines the maximum
#' possible number of observations by taking the max of the "obsIDName"
#' argument. It then estimates a model
#' @keywords logitr, mnl, mxl, logit, sample size
#'
#' @export
#' @examples
#' # For an example go to: https://github.com/jhelvy/logitr/tree/master/example
sampleSizer = function(data, obsIDName, parNames, nbreaks=10, priceName=NULL,
randPars=NULL, randPrice=NULL, modelSpace='pref',
options=list()) {
maxObs <- max(data[obsIDName])
nobs <- ceiling(seq(ceiling(maxObs/nbreaks), maxObs, length.out = nbreaks))
models <- list()
for (i in 1:nbreaks) {
tempData <- getTempData(data, obsIDName, nobs[i])
model <- logitr(
data       = tempData,
choiceName = 'choice',
obsIDName  = obsIDName,
parNames   = parNames,
priceName  = priceName,
randPars   = randPars,
randPrice  = randPrice,
modelSpace = modelSpace,
options    = options)
models[[i]] <- getSE(model, nobs[i])
}
return(do.call(rbind, models))
}
getTempData <- function(data, obsIDName, size) {
tempData <- data[which(data[obsIDName] < size),]
tempData$choice <- generateChoices(tempData, obsIDName, size)
return(tempData)
}
generateChoices <- function(data, obsIDName, size) {
nrows <- table(data[obsIDName])
choices <- list()
for (i in 1:length(nrows)) {
choice <- rep(0, nrows[i])
choice[sample(seq(nrows[i]), 1)] <- 1
choices[[i]] <- choice
}
return(unlist(choices))
}
getSE <- function(model, size) {
se <- data.frame(
size = size,
se   = model$standErrs)
se$coef = row.names(se)
row.names(se) <- NULL
return(se)
}
# Install logitr package from github
library('devtools')
install_github('jhelvy/logitr')
# Load logitr package
library('logitr')
# Load the reformatted 'Yogurt' data set from the mlogit package
data(yogurt)
test <- sampleSizer(
data       = yogurt,
obsIDName  = 'obsID',
parNames   = c('price', 'feat', 'dannon', 'hiland', 'yoplait'),
nbreaks    = 5)
test
plot(test$size, test$se)
plot
plot(test$size, test$se)
#' about deficiencies in your design of experiment and also assess the sample
#' size needed to achieve parameter precision levels before you go out and
#' use the design to collect data. The function first determines the maximum
#' possible number of observations by taking the max of the "obsIDName"
#' argument. It then estimates a model
#' @keywords logitr, mnl, mxl, logit, sample size
#'
#' @export
#' @examples
#' # For an example go to: https://github.com/jhelvy/logitr/tree/master/example
sampleSizer = function(data, obsIDName, parNames, nbreaks=10, plot=TRUE,
priceName=NULL, randPars=NULL, randPrice=NULL,
modelSpace='pref', options=list()) {
maxObs <- max(data[obsIDName])
nobs <- ceiling(seq(ceiling(maxObs/nbreaks), maxObs, length.out = nbreaks))
models <- list()
for (i in 1:nbreaks) {
tempData <- getTempData(data, obsIDName, nobs[i])
model <- logitr(
data       = tempData,
choiceName = 'choice',
obsIDName  = obsIDName,
parNames   = parNames,
priceName  = priceName,
randPars   = randPars,
randPrice  = randPrice,
modelSpace = modelSpace,
options    = options)
models[[i]] <- getSE(model, nobs[i])
}
result <- do.call(rbind, models)
if (plot) {
plot(result$size, result$se, ylab = 'Standard Error',
xlab = 'Number of observations')
}
return(result)
}
test <- sampleSizer(
data       = yogurt,
obsIDName  = 'obsID',
parNames   = c('price', 'feat', 'dannon', 'hiland', 'yoplait'),
nbreaks    = 5)
test <- sampleSizer(
data       = yogurt,
obsIDName  = 'obsID',
parNames   = c('price', 'feat', 'dannon', 'hiland', 'yoplait'),
nbreaks    = 10)
test <- sampleSizer(
data       = yogurt,
obsIDName  = 'obsID',
parNames   = c('price', 'feat', 'dannon', 'hiland', 'yoplait'),
nbreaks    = 10,
plot       = TRUE)
devtools::document()
# Install the package
devtools::install(force = TRUE)
# Load the package and view the summary
library(logitr)
# Install the package
devtools::install(force = TRUE)
# Load the package and view the summary
library(logitr)
help(package='logitr')
devtools::install_github('jhelvy/logitr')
devtools::install_github('jhelvy/logitr')
devtools::install_github('jhelvy/logitr')
devtools::install_github('jhelvy/logitr')
devtools::install_github('jhelvy/logitr')
